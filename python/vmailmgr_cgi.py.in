# This is -*-python-*- code.
#
# Copyright (C) 1999,2000 Bruce Guenter <bruceg@em.ca>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import cgi
import os
import random
import string
import sys
import time

import vmailmgr

template_dir = '.'
data_dir = '.'

# Limit the maximum amount of data sendable to this CGI to 64K.
# This should be enough for any command (the maximum that can be sent
# down to the vmailmgr daemon is 64K) and prevents D.O.S. attacks.
cgi.maxlen = 64*1024

_SESSION = intern('session')

class VFieldStorage(cgi.FieldStorage):
    def __init__(self):
        cgi.FieldStorage.__init__(self)
        self.cookies = {}
        try:
            self.load_cookies(os.environ['HTTP_COOKIE'])
        except KeyError:
            pass
    def load_cookies(self, cookie_str):
        for cookie in string.split(cookie_str):
            try:
                (key,val) = string.split(cookie, '=', 1)
            except ValueError:
                continue
            self.cookies[key] = val
    def get(self, key, default=None):
        try:
            value = self[key]
        except KeyError:
            if default is not None:
                return default
            else:
                raise KeyError, "Unknown form input field name '%s'"%key
        if type(value) is type([]):
            raise ValueError, "Input '%s' is multiply defined" % key
        if value.file:
            raise ValueError, "Input '%s' is a file" % key
        return value.value

    def fetch_args(self):
        argcount = 0
        argname = 'arg%d' % argcount
        args = []
        while self.has_key(argname):
            args.append(self.get(argname))
            argcount = argcount + 1
            argname = 'arg%d' % argcount
        return args

def print_file(filename, substs):
    file = open(filename, 'r')
    contents = file.read()
    file.close()
    return sys.stdout.write(contents % substs)

HTML_TITLED = """<html>
<head><title>%(title)s</title></head>
<body><center><p><h1>%(title)s</h1></p></center><hr>
<p>%(message)s</p>
</html>"""

HTML_NOFILE = HTML_TITLED % {
    'title': 'Internal VMailMgr CGI Error',
    'message': 'Could not load document "%s"' }

HTML_ERROR = HTML_TITLED % {
    'title': 'VMailMgr CGI Error',
    'message': ('An error occurred while executing this operation:<br>'
                '<pre>%(response)s</pre>') }

def print_html(basename, substs, nofile=None, cookies=None):
    basename = string.replace(basename, '.', ':')
    httpname = basename + '.http'
    htmlname = basename + '.html'
    if cookies:
        for cookie in cookies.items():
            sys.stdout.write("Set-Cookie: %s=%s\n" % cookie)
    try:
        print_file(httpname, substs)
    except IOError:
        pass
    sys.stdout.write("\n")
    try:
        return print_file(htmlname, substs)
    except IOError:
        if nofile is not None:
            return sys.stdout.write(nofile % substs)
        else:
            return sys.stdout.write(HTML_NOFILE % htmlname)

RESPONSE = intern('response')

def wrap_print(command, args, basename, substs={}):
    succname = basename + '-success'
    errname = basename + '-error'
    try:
        response = apply(command, tuple(args))
        substs[RESPONSE] = response
        print_html(succname, substs)
    except vmailmgr.Error, msg:
        substs[RESPONSE] = msg
        print_html(errname, substs, HTML_ERROR)
    except vmailmgr.Bad, msg:
        substs[RESPONSE] = msg
        print_html(errname, substs, HTML_ERROR)
    except vmailmgr.Econn, msg:
        substs[RESPONSE] = msg
        print_html(errname, substs, HTML_ERROR)
    except:
        substs[RESPONSE] = msg
        print_html(errname, substs, HTML_ERROR)

def cgi_main(mainfn, allow_get=None):
    if not os.environ.has_key('REQUEST_METHOD'):
        sys.stdout.write("This program must be run as a CGI\n")
        sys.exit(1)
    
    sys.stdout.write("Content-Type: text/html\n")

    try:
        if os.environ['REQUEST_METHOD'] == 'GET' and not allow_get:
            sys.stdout.write("\n"
                             "<html><head><title>Refused</title></head>\n"
                             "<body><h1>CGI GET is refused for security "
                             "reasons.</h1></body></html>\n")
            sys.exit(0)
        form = VFieldStorage()
        mainfn(form)
    except SystemExit:
        pass
    except:
        print
        cgi.print_exception()

NUL = intern('\0')

def _auto_convert(str):
    try: return int(str)
    except ValueError: pass

    try: return float(str)
    except ValueError: pass

    return str

def sessions_db_name():
    return os.path.join(data_dir, 'sessions.db')

def age_sessions():
    pass

class Session:
    def __init__(self, key=None):
        if key:
            import anydbm
            data = anydbm.open(sessions_db_name(), 'r')[key]
            ( self.domain,
              self.username,
              self.password,
              self.timestamp ) = map(_auto_convert, string.split(data, NUL))
            self.key = key
        else:
            self.key = "%f.%d.%d" % (time.time(), os.getpid(),
                                     int(random.uniform(0, 1000000000)))
            self.domain = None
            self.username = None
            self.password = None
            self.timestamp = None
    def __str__(self):
        return string.join([ self.domain,
                             self.username,
                             self.password,
                             str(time.time()) ], NUL)
    def save(self):
        if self.domain is None or self.password is None:
            raise ValueError, "Can't save unset values"
        import anydbm
        db = anydbm.open(sessions_db_name(), 'c')
        db[self.key] = str(self)
        db.close()
    def age(self):
        return time.time() - self.timestamp
