#!/usr/bin/python
#
# Copyright (C) 1999,2000 Bruce Guenter <bruceg@em.ca>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA

import cgi
import os
import string
import sys

# Limit the maximum amount of data sendable to this CGI to 4K.
# This should be far more than necessary and prevents D.O.S. attacks.
cgi.maxlen = 4096

class VFieldStorage(cgi.FieldStorage):
    def __init__(self):
        cgi.FieldStorage.__init__(self)
    def get(self, key, default=None):
        try:
            value = self[key]
        except KeyError:
            if default is not None:
                return default
            else:
                raise KeyError, "Unknown form input field name '%s'"%key
        if type(value) is type([]):
            raise ValueError, "Input '%s' is multiply defined" % key
        if value.file:
            raise ValueError, "Input '%s' is a file" % key
        return value.value

    def fetch_args(self):
        argcount = 0
        argname = 'arg%d' % argcount
        args = []
        while self.has_key(argname):
            args.append(self.get(argname))
            argcount = argcount + 1
            argname = 'arg%d' % argcount
        return args

def encode_int(i):
    return chr((i/256)%256) + chr(i%256)

def encode_str(str):
    return encode_int(len(str)) + str

def read_config(name, default):
    try:
        file = open(os.path.join('%SYSCONFDIR%', name))
        result = string.strip(file.readline())
        file.close()
    except:
        result = default
    return result

response_codes = [
    "OK",
    "BAD",
    "Error",
    "Connect Error"
    ]

ok = 0
bad = 1
err = 2
econn = 3

class Command:
    def __init__(self, name, args):
        self.name = name
        self.args = args
    
    def encode(self):
        argcount = len(self.args)
        cmd = chr(argcount) + encode_str(self.name)
        for i in range(argcount):
            cmd = cmd + encode_str(self.args[i])
        cmd = chr(2) + encode_int(len(cmd)) + cmd
        return cmd

class Response:
    def __init__(self, code, msg):
        self.code_num = code
        self.code = response_codes[code]
        self.msg = msg
        
class Daemon:
    def __init__(self):
        self.socket_file = read_config('socket-file', '/tmp/.vmailmgrd')
        self.socket = None
    
    def connect(self):
        import socket
        self.socket = socket.socket(socket.AF_UNIX, socket.SOCK_STREAM)
        self.socket.connect(self.socket_file)

    def execute(self, command):
        try:
            self.connect()
        except:
            return Response(econn, "Unable to connect to the server")
        try:
            self.socket.send(command.encode())
            reply = self.socket.recv(3)
            code = ord(reply[0])
            msglen = ord(reply[1])*256 + ord(reply[2])
            message = self.socket.recv(msglen)
            self.socket.close()
        except:
            return Response(econn, "Server aborted the connection")
        return Response(code, message)
        
def print_file(filename, substs):
    file = open(filename, 'r')
    contents = file.read()
    file.close()
    return sys.stdout.write(contents % substs)

def print_html(basename, substs):
    basename = string.replace(basename, '.', ':')
    try:
        print_file(basename + '.http', substs)
    except IOError:
        pass
    sys.stdout.write("\n")
    return print_file(basename + '.html', substs)

def cgi_main(mainfn):
    sys.stdout.write("Content-Type: text/html\n")

    try:
        if os.environ['REQUEST_METHOD'] == 'GET':
            sys.stdout.write("\n"
                             "<html><head><title>Refused</title></head>\n"
                             "<body><h1>CGI GET is refused for security "
                             "reasons.</h1></body></html>\n")
            sys.exit(0)
        form = VFieldStorage()
        mainfn(form)
    except SystemExit:
        pass
    except:
        print
        cgi.print_exception()
