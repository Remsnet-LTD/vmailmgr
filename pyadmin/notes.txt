Vmailmgr-pyadmin Notes
======================

This document will eventually be turned into a more substantial document
once some of the development work has settled down.  See the included
template files for more examples.

File Input and Output
---------------------

When "http://site/.../cgi-bin/vmailmgr-pyadmin/page" is requested, a
pair of files in ".../cgi-bin/vmailmgr-pyadmin-templates" (by default)
are formatted.  If it exists, "page.vhttp" is output before the blank
line following the HTTP header.  This allows the template to send out
HTTP options such as redirects or cookies.  Then "page.vhtml" is
output.  Any periods in "page" are replaced by colons, preventing
attackers from reading privileged files.  If no "page" is listed after
"vmailmgr-pyadmin", "index" is used as a default.

Login and Logout
----------------

Before granting access to any of the pages, the user must log into the
system.  The login front page is read from the "login-form" page, as
per the above section.  If a previous log in attempt failed, "failed"
will be set to true, and "reason" will be set to a string identifying
what went wrong.  This form must contain "domain" and "password"
inputs, and may optionally contain a "username" input (for virtual
user logins).

Log in passwords are checked through the vmailmgr daemon.  After the
user is successfully logged in, a session is created which stores
their domain name, user name, and pass phrase.  This session is stored
on the server, and a unique unguessable key is sent back to the client
as a cookie to access the session.

The special page "logout" causes the session to be destroyed.
Otherwise, sessions are automatically destroyed 15 minutes after the
last time they are accessed.

Contexts
--------

When the script starts, it builds up a context in which the pages are
formatted.  The context is a set of variables that are available to
use in the page.

The context contains each cookie sent to the page, all of the form
inputs, and a set of preset variables.  Cookies override form inputs,
and the presets override everything else.  The following presets are
available:

- DOMAIN: the domain name for the logged in user

- USERNAME: either the name of the logged in user, user selected by
  passing in a "username" form input or cookie, or an empty string

- SESSION: the unique ID for the current session.

Formatting
----------

Each text section is treated as a Python format string to which the
context is applied, with some additional features.  In simpler terms,
this means that you can write "%(var)s" to insert the value of "var"
(taken from the context) as a string.  See
  http://www.python.org/doc/current/lib/typesseq-strings.html
for a a (very) few more details.

Additionally, you can write "%(EXPR)s", where "EXPR" is a Python
expression.  All built-in Python functions are available for use in
these expressions, as well as the math, random, re, regsub, string,
and time modules, a vmailmgr wrapper function module, and the
following functions:

- iif(cond,true,false): returns true if cond evaluates true, and false
  otherwise.  Similar to C's "cond?true:false" operator, except that
  "true" and "false" are always evaluated.

- escape(string[,list]): escapes listed characters in the string by
  replacing them with alternates.  If no list is given, a list
  containing escapes for HTML meta-characters ("&", "<", ">", and
  double quote) is used.

Formatting Examples
-------------------

Insert a fully-qualified email address for the current user:
       From: %(USERNAME)s@%(DOMAIN)s
Insert the value of "forwards" (a list) seperated by ", ":
       %(string.join(forwards, ', '))s

Insert a random floating-point number:
       %(random.uniform(0, 1000000000))f

Insert either "yes" or "no", depending on if "mailbox" is set:
       %(iif(mailbox, 'yes', 'no'))s

Syntax
------

The following syntax blocks are available.  In all of the following
samples, "EXPR" refers to a valid Python expression, "LIST" refers to
a Python expression that returns a list of dictionaries, and "CODE" is
any valid Python code.

Special syntax is enclosed in "<?" and "?>" tags.  All whitespace
following the closing tag up to and including the end of the line is
stripped from the output.

- "if EXPR": format the following block only if EXPR evaluates true
  (based on Python rules for true -- non-zero numbers, non-empty
  strings or lists)

- "else if EXPR": equivalent to "else" "if EXPR" without requiring an
  extra "end" to close the extra "if".

- "else": format the following block only if the preceding "if"
  expression evaluated to false.

- "foreach LIST": formats the following block once for each element
  returned by LIST.  The data in LIST is inserted into the context for
  each iteration.

- "end": closes an "if" or "foreach" block.

- anything else in the open and close tags is treated as Python code
  and executed.  All changes made to variables are propagated into the
  context.

Syntax Examples
---------------

Format "text1" if "foo()" evaluates true; "text2" if "bar()" evaluates
true; and "text3" if neither do:

  <? if foo() ?>
  text1
  <? else if bar() ?>
  text2
  <? else ?>
  text3
  <? end ?>
